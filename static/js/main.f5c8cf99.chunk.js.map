{"version":3,"sources":["static/characters.ts","static/rules.ts","static/utils.ts","components/Preview.tsx","components/Rules.tsx","components/Selector.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CharType","Punctuation","Uppercase","Lowercase","NumberTraditional","NumberUppercase","Symbol","XHeight","Descender","Ascender","WithDiacritical","characters","column","types","char","requiredCount","isRuleGroup","ruleOrGroup","undefined","logic","evalRule","selection","predicate","passed","rules","filter","rule","length","requireCountOfType","acceptHigher","countOfType","a","every","i","includes","name","columns","map","unique","Set","requiredColumns","required","some","requireColumns","Preview","props","allPassed","className","displayChar","split","modifier","renderCharacter","Rules","renderRule","index","innerRules","selectorRows","Selector","columnCount","reduce","acc","renderCellContent","cellCharacters","charElements","forEach","selected","sel","push","onClick","newSelection","concat","onSelectionChange","toggleSelected","span","row","rowTypes","rowCharacters","b","cells","renderRow","App","useState","setSelection","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAAYA,E,8EAAAA,O,6BAAAA,I,yBAAAA,I,yBAAAA,I,yCAAAA,I,qCAAAA,I,mBAAAA,I,qBAAAA,I,yBAAAA,I,uBAAAA,I,sCAAAA,M,KAcEA,EAASC,YACTD,EAASE,UACTF,EAASG,UACTH,EAASI,kBACTJ,EAASK,gBACTL,EAASM,OACTN,EAASO,QACTP,EAASQ,UACTR,EAASS,SACTT,EAASU,gBAVvB,IAseeC,EA/ciB,CAC9B,CACEC,OAAQ,EACRC,MAAO,CAACb,EAASC,aACjBa,KAAM,KAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASC,aACjBa,KAAM,KAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASC,aACjBa,KAAM,YAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASC,aACjBa,KAAM,UAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASE,WACjBY,KAAM,KAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASE,WACjBY,KAAM,KAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASE,WACjBY,KAAM,KAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASE,WACjBY,KAAM,KAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASE,WACjBY,KAAM,KAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASE,WACjBY,KAAM,KAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASE,WACjBY,KAAM,KAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASE,WACjBY,KAAM,KAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASE,WACjBY,KAAM,KAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASE,WACjBY,KAAM,KAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASE,WACjBY,KAAM,KAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASE,WACjBY,KAAM,KAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASE,WACjBY,KAAM,KAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASE,WACjBY,KAAM,KAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASE,WACjBY,KAAM,KAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASE,WACjBY,KAAM,KAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASE,WACjBY,KAAM,KAER,CACEF,OAAQ,GACRC,MAAO,CAACb,EAASE,WACjBY,KAAM,KAER,CACEF,OAAQ,GACRC,MAAO,CAACb,EAASE,WACjBY,KAAM,KAER,CACEF,OAAQ,GACRC,MAAO,CAACb,EAASE,WACjBY,KAAM,KAER,CACEF,OAAQ,GACRC,MAAO,CAACb,EAASE,WACjBY,KAAM,KAER,CACEF,OAAQ,GACRC,MAAO,CAACb,EAASE,WACjBY,KAAM,KAER,CACEF,OAAQ,GACRC,MAAO,CAACb,EAASE,WACjBY,KAAM,KAER,CACEF,OAAQ,GACRC,MAAO,CAACb,EAASE,WACjBY,KAAM,KAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASE,UAAWF,EAASU,iBACrCI,KAAM,QAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASG,UAAWH,EAASU,iBACrCI,KAAM,QAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASG,UAAWH,EAASU,iBACrCI,KAAM,QAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASG,UAAWH,EAASU,iBACrCI,KAAM,YAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASG,UAAWH,EAASU,iBACrCI,KAAM,QAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASG,UAAWH,EAASU,iBACrCI,KAAM,QAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASG,UAAWH,EAASU,iBACrCI,KAAM,QAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASG,UAAWH,EAASU,iBACrCI,KAAM,QAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASG,UAAWH,EAASO,SACrCO,KAAM,KAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASG,UAAWH,EAASO,SACrCO,KAAM,KAER,CACEF,OAAQ,EACRC,MAAO,CAACb,EAASG,UAAWH,EAASO,SACrCO,KAAM,KAER,CACEF,OAAQ,EAC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","file":"static/js/main.f5c8cf99.chunk.js","sourcesContent":["export enum CharType {\r\n  Punctuation,\r\n  Uppercase,\r\n  Lowercase,\r\n  NumberTraditional,\r\n  NumberUppercase,\r\n  Symbol,\r\n  XHeight,\r\n  Descender,\r\n  Ascender,\r\n  WithDiacritical\r\n}\r\n\r\nconst charTypeNameMap = [\r\n  { charType: CharType.Punctuation, name: 'Puntuación' },\r\n  { charType: CharType.Uppercase, name: 'Mayúsculas' },\r\n  { charType: CharType.Lowercase, name: 'Minúsculas' },\r\n  { charType: CharType.NumberTraditional, name: 'Números antiguos' },\r\n  { charType: CharType.NumberUppercase, name: 'Números mayúsculos' },\r\n  { charType: CharType.Symbol, name: 'Signos' },\r\n  { charType: CharType.XHeight, name: 'de altura de x' },\r\n  { charType: CharType.Descender, name: 'con descendente' },\r\n  { charType: CharType.Ascender, name: 'con ascendente' },\r\n  { charType: CharType.WithDiacritical, name: 'con diacrítico' }\r\n];\r\n\r\nexport const getCharTypeName = (type: CharType): string => {\r\n  return charTypeNameMap.find(it => it.charType === type)?.name || '';\r\n};\r\n\r\nexport interface Character {\r\n  column: number;\r\n  types: CharType[];\r\n  char: string;\r\n}\r\n\r\nconst characters: Character[] = [\r\n  {\r\n    column: 1,\r\n    types: [CharType.Punctuation],\r\n    char: ':'\r\n  },\r\n  {\r\n    column: 1,\r\n    types: [CharType.Punctuation],\r\n    char: ';'\r\n  },\r\n  {\r\n    column: 1,\r\n    types: [CharType.Punctuation],\r\n    char: '«»'\r\n  },\r\n  {\r\n    column: 1,\r\n    types: [CharType.Punctuation],\r\n    char: '…'\r\n  },\r\n  {\r\n    column: 2,\r\n    types: [CharType.Uppercase],\r\n    char: 'S'\r\n  },\r\n  {\r\n    column: 4,\r\n    types: [CharType.Uppercase],\r\n    char: 'C'\r\n  },\r\n  {\r\n    column: 4,\r\n    types: [CharType.Uppercase],\r\n    char: 'D'\r\n  },\r\n  {\r\n    column: 4,\r\n    types: [CharType.Uppercase],\r\n    char: 'G'\r\n  },\r\n  {\r\n    column: 4,\r\n    types: [CharType.Uppercase],\r\n    char: 'O'\r\n  },\r\n  {\r\n    column: 4,\r\n    types: [CharType.Uppercase],\r\n    char: 'Q'\r\n  },\r\n  {\r\n    column: 5,\r\n    types: [CharType.Uppercase],\r\n    char: 'U'\r\n  },\r\n  {\r\n    column: 6,\r\n    types: [CharType.Uppercase],\r\n    char: 'J'\r\n  },\r\n  {\r\n    column: 7,\r\n    types: [CharType.Uppercase],\r\n    char: 'A'\r\n  },\r\n  {\r\n    column: 7,\r\n    types: [CharType.Uppercase],\r\n    char: 'V'\r\n  },\r\n  {\r\n    column: 8,\r\n    types: [CharType.Uppercase],\r\n    char: 'M'\r\n  },\r\n  {\r\n    column: 8,\r\n    types: [CharType.Uppercase],\r\n    char: 'W'\r\n  },\r\n  {\r\n    column: 9,\r\n    types: [CharType.Uppercase],\r\n    char: 'K'\r\n  },\r\n  {\r\n    column: 9,\r\n    types: [CharType.Uppercase],\r\n    char: 'X'\r\n  },\r\n  {\r\n    column: 9,\r\n    types: [CharType.Uppercase],\r\n    char: 'Y'\r\n  },\r\n  {\r\n    column: 9,\r\n    types: [CharType.Uppercase],\r\n    char: 'N'\r\n  },\r\n  {\r\n    column: 9,\r\n    types: [CharType.Uppercase],\r\n    char: 'Z'\r\n  },\r\n  {\r\n    column: 10,\r\n    types: [CharType.Uppercase],\r\n    char: 'B'\r\n  },\r\n  {\r\n    column: 10,\r\n    types: [CharType.Uppercase],\r\n    char: 'P'\r\n  },\r\n  {\r\n    column: 10,\r\n    types: [CharType.Uppercase],\r\n    char: 'R'\r\n  },\r\n  {\r\n    column: 11,\r\n    types: [CharType.Uppercase],\r\n    char: 'E'\r\n  },\r\n  {\r\n    column: 11,\r\n    types: [CharType.Uppercase],\r\n    char: 'F'\r\n  },\r\n  {\r\n    column: 11,\r\n    types: [CharType.Uppercase],\r\n    char: 'H'\r\n  },\r\n  {\r\n    column: 11,\r\n    types: [CharType.Uppercase],\r\n    char: 'T'\r\n  },\r\n  {\r\n    column: 9,\r\n    types: [CharType.Uppercase, CharType.WithDiacritical],\r\n    char: 'Ñ'\r\n  },\r\n  {\r\n    column: 2,\r\n    types: [CharType.Lowercase, CharType.WithDiacritical],\r\n    char: 'á'\r\n  },\r\n  {\r\n    column: 2,\r\n    types: [CharType.Lowercase, CharType.WithDiacritical],\r\n    char: 'é'\r\n  },\r\n  {\r\n    column: 3,\r\n    types: [CharType.Lowercase, CharType.WithDiacritical],\r\n    char: 'á_alt'\r\n  },\r\n  {\r\n    column: 4,\r\n    types: [CharType.Lowercase, CharType.WithDiacritical],\r\n    char: 'ó'\r\n  },\r\n  {\r\n    column: 5,\r\n    types: [CharType.Lowercase, CharType.WithDiacritical],\r\n    char: 'ñ'\r\n  },\r\n  {\r\n    column: 5,\r\n    types: [CharType.Lowercase, CharType.WithDiacritical],\r\n    char: 'ú'\r\n  },\r\n  {\r\n    column: 5,\r\n    types: [CharType.Lowercase, CharType.WithDiacritical],\r\n    char: 'ü'\r\n  },\r\n  {\r\n    column: 2,\r\n    types: [CharType.Lowercase, CharType.XHeight],\r\n    char: 'a'\r\n  },\r\n  {\r\n    column: 2,\r\n    types: [CharType.Lowercase, CharType.XHeight],\r\n    char: 'e'\r\n  },\r\n  {\r\n    column: 2,\r\n    types: [CharType.Lowercase, CharType.XHeight],\r\n    char: 's'\r\n  },\r\n  {\r\n    column: 3,\r\n    types: [CharType.Lowercase, CharType.XHeight],\r\n    char: 'a_alt'\r\n  },\r\n  {\r\n    column: 4,\r\n    types: [CharType.Lowercase, CharType.XHeight],\r\n    char: 'c'\r\n  },\r\n  {\r\n    column: 4,\r\n    types: [CharType.Lowercase, CharType.XHeight],\r\n    char: '¢'\r\n  },\r\n  {\r\n    column: 4,\r\n    types: [CharType.Lowercase, CharType.XHeight],\r\n    char: 'o'\r\n  },\r\n  {\r\n    column: 5,\r\n    types: [CharType.Lowercase, CharType.XHeight],\r\n    char: 'm'\r\n  },\r\n  {\r\n    column: 5,\r\n    types: [CharType.Lowercase, CharType.XHeight],\r\n    char: 'n'\r\n  },\r\n  {\r\n    column: 5,\r\n    types: [CharType.Lowercase, CharType.XHeight],\r\n    char: 'u'\r\n  },\r\n  {\r\n    column: 6,\r\n    types: [CharType.Lowercase, CharType.XHeight],\r\n    char: 'r'\r\n  },\r\n  {\r\n    column: 6,\r\n    types: [CharType.Lowercase, CharType.XHeight],\r\n    char: 't'\r\n  },\r\n  {\r\n    column: 7,\r\n    types: [CharType.Lowercase, CharType.XHeight],\r\n    char: 'v'\r\n  },\r\n  {\r\n    column: 8,\r\n    types: [CharType.Lowercase, CharType.XHeight],\r\n    char: 'w'\r\n  },\r\n  {\r\n    column: 9,\r\n    types: [CharType.Lowercase, CharType.XHeight],\r\n    char: 'x'\r\n  },\r\n  {\r\n    column: 9,\r\n    types: [CharType.Lowercase, CharType.XHeight],\r\n    char: 'z'\r\n  },\r\n  {\r\n    column: 2,\r\n    types: [CharType.Lowercase, CharType.Descender],\r\n    char: 'g'\r\n  },\r\n  {\r\n    column: 3,\r\n    types: [CharType.Lowercase, CharType.Descender],\r\n    char: 'p'\r\n  },\r\n  {\r\n    column: 3,\r\n    types: [CharType.Lowercase, CharType.Descender],\r\n    char: 'q'\r\n  },\r\n  {\r\n    column: 3,\r\n    types: [CharType.Lowercase, CharType.Descender],\r\n    char: 'g_alt'\r\n  },\r\n  {\r\n    column: 6,\r\n    types: [CharType.Lowercase, CharType.Descender],\r\n    char: 'j'\r\n  },\r\n  {\r\n    column: 9,\r\n    types: [CharType.Lowercase, CharType.Descender],\r\n    char: 'y'\r\n  },\r\n  {\r\n    column: 3,\r\n    types: [CharType.Lowercase, CharType.Ascender],\r\n    char: 'b'\r\n  },\r\n  {\r\n    column: 3,\r\n    types: [CharType.Lowercase, CharType.Ascender],\r\n    char: 'd'\r\n  },\r\n  {\r\n    column: 5,\r\n    types: [CharType.Lowercase, CharType.Ascender],\r\n    char: 'h'\r\n  },\r\n  {\r\n    column: 6,\r\n    types: [CharType.Lowercase, CharType.Ascender],\r\n    char: 'f'\r\n  },\r\n  {\r\n    column: 9,\r\n    types: [CharType.Lowercase, CharType.Ascender],\r\n    char: 'k'\r\n  },\r\n  {\r\n    column: 3,\r\n    types: [CharType.Symbol],\r\n    char: '@'\r\n  },\r\n  {\r\n    column: 4,\r\n    types: [CharType.Symbol],\r\n    char: '€'\r\n  },\r\n  {\r\n    column: 10,\r\n    types: [CharType.Symbol],\r\n    char: '&'\r\n  },\r\n  {\r\n    column: 12,\r\n    types: [CharType.Symbol],\r\n    char: '{}'\r\n  },\r\n  {\r\n    column: 12,\r\n    types: [CharType.Symbol],\r\n    char: '()'\r\n  },\r\n  {\r\n    column: 12,\r\n    types: [CharType.Symbol],\r\n    char: '%'\r\n  },\r\n  {\r\n    column: 12,\r\n    types: [CharType.Symbol],\r\n    char: '#'\r\n  },\r\n  {\r\n    column: 13,\r\n    types: [CharType.Symbol],\r\n    char: '¿?'\r\n  },\r\n  {\r\n    column: 13,\r\n    types: [CharType.Symbol],\r\n    char: '£'\r\n  },\r\n  {\r\n    column: 3,\r\n    types: [CharType.NumberUppercase],\r\n    char: '6'\r\n  },\r\n  {\r\n    column: 3,\r\n    types: [CharType.NumberUppercase],\r\n    char: '9'\r\n  },\r\n  {\r\n    column: 4,\r\n    types: [CharType.NumberUppercase],\r\n    char: '0'\r\n  },\r\n  {\r\n    column: 6,\r\n    types: [CharType.NumberUppercase],\r\n    char: '1'\r\n  },\r\n  {\r\n    column: 10,\r\n    types: [CharType.NumberUppercase],\r\n    char: '3'\r\n  },\r\n  {\r\n    column: 10,\r\n    types: [CharType.NumberUppercase],\r\n    char: '5'\r\n  },\r\n  {\r\n    column: 10,\r\n    types: [CharType.NumberUppercase],\r\n    char: '8'\r\n  },\r\n  {\r\n    column: 11,\r\n    types: [CharType.NumberUppercase],\r\n    char: '4'\r\n  },\r\n  {\r\n    column: 11,\r\n    types: [CharType.NumberUppercase],\r\n    char: '7'\r\n  },\r\n  {\r\n    column: 13,\r\n    types: [CharType.NumberUppercase],\r\n    char: '2'\r\n  },\r\n  {\r\n    column: 4,\r\n    types: [CharType.NumberTraditional, CharType.XHeight],\r\n    char: '0_low'\r\n  },\r\n  {\r\n    column: 6,\r\n    types: [CharType.NumberTraditional, CharType.XHeight],\r\n    char: '1_low'\r\n  },\r\n  {\r\n    column: 13,\r\n    types: [CharType.NumberTraditional, CharType.XHeight],\r\n    char: '2_low'\r\n  },\r\n  {\r\n    column: 3,\r\n    types: [CharType.NumberTraditional, CharType.Descender],\r\n    char: '9_low'\r\n  },\r\n  {\r\n    column: 10,\r\n    types: [CharType.NumberTraditional, CharType.Descender],\r\n    char: '3_low'\r\n  },\r\n  {\r\n    column: 10,\r\n    types: [CharType.NumberTraditional, CharType.Descender],\r\n    char: '5_low'\r\n  },\r\n  {\r\n    column: 11,\r\n    types: [CharType.NumberTraditional, CharType.Descender],\r\n    char: '4_low'\r\n  },\r\n  {\r\n    column: 11,\r\n    types: [CharType.NumberTraditional, CharType.Descender],\r\n    char: '7_low'\r\n  },\r\n  {\r\n    column: 3,\r\n    types: [CharType.NumberTraditional, CharType.Ascender],\r\n    char: '6_low'\r\n  },\r\n  {\r\n    column: 10,\r\n    types: [CharType.NumberTraditional, CharType.Ascender],\r\n    char: '8_low'\r\n  }\r\n];\r\n\r\nexport default characters;","import { Character, CharType } from './characters';\r\nimport { setContains } from './utils';\r\n\r\n// Rule types\r\nexport type RulePredicate = (selection: Character[]) => boolean;\r\n\r\nexport interface Rule {\r\n  name: string;\r\n  predicate: RulePredicate;\r\n}\r\n\r\nexport interface RuleGroup {\r\n  name: string;\r\n  logic: 'or' | 'xor' | 'and';\r\n  rules: (Rule | RuleGroup)[];\r\n}\r\n\r\n// Utilities\r\nexport const isRuleGroup = (ruleOrGroup: Rule | RuleGroup): ruleOrGroup is RuleGroup => {\r\n  return (ruleOrGroup as RuleGroup).logic !== undefined;\r\n};\r\n\r\nexport const evalRule = (ruleOrGroup: Rule | RuleGroup, selection: Character[]): boolean => {\r\n  if (isRuleGroup(ruleOrGroup)) {\r\n    const passed = ruleOrGroup.rules.filter(rule => evalRule(rule, selection));\r\n    switch (ruleOrGroup.logic) {\r\n      case 'or':\r\n        return passed.length >= 1;\r\n      case 'xor':\r\n        return passed.length === 1;\r\n      case 'and':\r\n        return passed.length === ruleOrGroup.rules.length;\r\n    }\r\n  } else return ruleOrGroup.predicate(selection);\r\n};\r\n\r\n// Rule predicates and predicate-factories\r\nconst requireCount = (requiredCount: number) =>\r\n  (selection: Character[]) => selection.length === requiredCount;\r\n\r\nconst oneCharPerColumn = (selection: Character[]) => {\r\n  const columns = selection.map(char => char.column);\r\n  const unique = [...new Set(columns)];\r\n\r\n  return columns.length === unique.length;\r\n};\r\n\r\nconst requireColumns = (requiredColumns: number[]) =>\r\n  (selection: Character[]) =>\r\n    requiredColumns.every(required => selection.some(char => char.column === required));\r\n\r\nconst requireCountOfType = (requiredCount: number, types: CharType[], acceptHigher: boolean) =>\r\n  (selection: Character[]) => {\r\n    const countOfType = selection.filter(char => setContains(char.types, types)).length;\r\n    return acceptHigher ? countOfType >= requiredCount : countOfType === requiredCount;\r\n  };\r\n\r\n// Da Rulez\r\nexport const requiredColumns = [1, 2];\r\n\r\nconst rules: (Rule | RuleGroup)[] = [\r\n  {\r\n    name: 'Debe quedar un grupo de 12 signos en total',\r\n    predicate: requireCount(12)\r\n  },\r\n  {\r\n    name: 'Sólo puede elegirse un carácter por columna',\r\n    predicate: oneCharPerColumn\r\n  },\r\n  {\r\n    name: 'Tiene que haber un carácter de cada columna con fondo celeste',\r\n    predicate: requireColumns(requiredColumns)\r\n  },\r\n  {\r\n    name: 'Tiene que haber un signo de puntuación',\r\n    predicate: requireCountOfType(1, [CharType.Punctuation], false)\r\n  },\r\n  {\r\n    name: 'Tiene que haber 3 letras mayúsculas',\r\n    predicate: requireCountOfType(3, [CharType.Uppercase], false)\r\n  },\r\n  {\r\n    name: 'Letras minúsculas:',\r\n    logic: 'and',\r\n    rules: [\r\n      {\r\n        name: 'Tiene que haber 4 letras minúsculas',\r\n        predicate: requireCountOfType(4, [CharType.Lowercase], false)\r\n      },\r\n      {\r\n        name: 'Tiene que haber por lo menos una letra de altura de x',\r\n        predicate: requireCountOfType(1, [CharType.Lowercase, CharType.XHeight], true)\r\n      },\r\n      {\r\n        name: 'Tiene que haber por lo menos una letra con descendente',\r\n        predicate: requireCountOfType(1, [CharType.Lowercase, CharType.Descender], true)\r\n      },\r\n      {\r\n        name: 'Tiene que haber por lo menos una letra con ascendente',\r\n        predicate: requireCountOfType(1, [CharType.Lowercase, CharType.Ascender], true)\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    name: 'Tiene que haber una letra con diacrítico',\r\n    predicate: requireCountOfType(1, [CharType.WithDiacritical], false)\r\n  },\r\n  {\r\n    name: 'Tiene que haber un signo no alfanumérico',\r\n    predicate: requireCountOfType(1, [CharType.Symbol], false)\r\n  },\r\n  {\r\n    name: 'Tiene que haber una de las siguientes:',\r\n    logic: 'xor',\r\n    rules: [\r\n      {\r\n        name: '3 números mayúsculos',\r\n        predicate: requireCountOfType(3, [CharType.NumberUppercase], false)\r\n      },\r\n      {\r\n        name: '3 números antiguos, de los cuales:',\r\n        logic: 'and',\r\n        rules: [\r\n          {\r\n            name: 'Uno de altura de x',\r\n            predicate: requireCountOfType(1, [CharType.NumberTraditional, CharType.XHeight], false)\r\n          },\r\n          {\r\n            name: 'Uno con descendente',\r\n            predicate: requireCountOfType(1, [CharType.NumberTraditional, CharType.Descender], false)\r\n          },\r\n          {\r\n            name: 'Uno con ascendente',\r\n            predicate: requireCountOfType(1, [CharType.NumberTraditional, CharType.Ascender], false)\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default rules;","export function setContains<T> (a: T[], b: T[]): boolean {\r\n  return b.every(i => a.includes(i));\r\n}\r\n\r\nexport function setEquals<T> (a: T[], b: T[]): boolean {\r\n  return a.every(i => b.includes(i)) && b.every(i => a.includes(i));\r\n}","import React from 'react';\r\nimport './Preview.css';\r\nimport { Character } from '../static/characters';\r\nimport rules, { evalRule } from '../static/rules';\r\n\r\nexport interface PreviewProps {\r\n  selection: Character[];\r\n}\r\n\r\nconst Preview = (props: PreviewProps) => {\r\n  const renderCharacter = (char: Character, i: number) => {\r\n    const displayChar = char.char.split('_')[0];\r\n    const modifier = char.char.split('_')[1];\r\n\r\n    let className = 'character';\r\n    if (modifier === 'low') className += ' number_oldstyle';\r\n    if (modifier === 'alt') className += ' style_alternate';\r\n\r\n    return (\r\n      <span key={i} className={className}>\r\n        {displayChar}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const allPassed = rules.every(ruleOrGroup => evalRule(ruleOrGroup, props.selection));\r\n\r\n  return (\r\n    <div className=\"preview\">\r\n      <div>Signos seleccionados</div>\r\n      <span className=\"characters\">\r\n        &nbsp;{props.selection.map((char, i) => renderCharacter(char, i))}&nbsp;\r\n      </span>\r\n      {allPassed && (\r\n        <span className=\"all-passed\">&#128076;</span>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Preview;","import React from 'react';\r\nimport './Rules.css';\r\nimport { Character } from '../static/characters';\r\nimport rules, { evalRule, isRuleGroup, Rule, RuleGroup } from '../static/rules';\r\n\r\nexport interface RulesProps {\r\n  selection: Character[];\r\n}\r\n\r\nconst Rules = (props: RulesProps) => {\r\n  const renderRule = (ruleOrGroup: Rule | RuleGroup, index: number) => {\r\n    const passed = evalRule(ruleOrGroup, props.selection);\r\n\r\n    if (isRuleGroup(ruleOrGroup)) {\r\n      const innerRules = ruleOrGroup.rules.map((rule, i) => renderRule(rule, i));\r\n\r\n      return (\r\n        <li key={index} className={'rule ' + (passed ? 'passed' : 'failed')}>\r\n          {ruleOrGroup.name}\r\n          <ul className=\"rule-group\">\r\n            { innerRules }\r\n          </ul>\r\n        </li>\r\n      );\r\n    } else {\r\n      return (\r\n        <li key={index} className={'rule ' + (passed ? 'passed' : 'failed')}>\r\n          {ruleOrGroup.name}\r\n        </li>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ul className=\"rules\">\r\n      { rules.map((rule, i) => renderRule(rule, i)) }\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Rules;","import React from 'react';\r\nimport './Selector.css';\r\nimport characters, { Character, CharType } from '../static/characters';\r\nimport { setEquals } from '../static/utils';\r\n\r\nexport interface SelectorProps {\r\n  selection: Character[];\r\n  onSelectionChange: (e: Character[]) => void\r\n}\r\n\r\n// Define rows for the table based on character type\r\nconst selectorRows = [\r\n  [CharType.Punctuation],\r\n  [CharType.Uppercase],\r\n  [CharType.Uppercase, CharType.WithDiacritical],\r\n  [CharType.Lowercase, CharType.WithDiacritical],\r\n  [CharType.Lowercase, CharType.XHeight],\r\n  [CharType.Lowercase, CharType.Descender],\r\n  [CharType.Lowercase, CharType.Ascender],\r\n  [CharType.Symbol],\r\n  [CharType.NumberUppercase],\r\n  [CharType.NumberTraditional, CharType.XHeight],\r\n  [CharType.NumberTraditional, CharType.Descender],\r\n  [CharType.NumberTraditional, CharType.Ascender]\r\n];\r\n\r\nconst Selector = (props: SelectorProps) => {\r\n  // Infer the column count from the rightmost column defined in the character list\r\n  const columnCount = characters\r\n    .map(char => char.column)\r\n    .reduce((acc, column) => column > acc ? column : acc, 0);\r\n\r\n  const toggleSelected = (char: Character) => {\r\n    const wasSelected = props.selection.some(sel => sel.char === char.char);\r\n    const newSelection = wasSelected ?\r\n      props.selection.filter(sel => sel.char !== char.char) :\r\n      props.selection.concat(char);\r\n\r\n    props.onSelectionChange(newSelection);\r\n  };\r\n\r\n  const renderCellContent = (cellCharacters: Character[]) => {\r\n    const charElements: JSX.Element[] = [];\r\n\r\n    cellCharacters.forEach((char, i) => {\r\n      const selected = props.selection.some(sel => sel.char === char.char);\r\n      const displayChar = char.char.split('_')[0];\r\n      const modifier = char.char.split('_')[1];\r\n\r\n      let className = 'character';\r\n      if (modifier === 'low') className += ' number_oldstyle';\r\n      if (modifier === 'alt') className += ' style_alternate';\r\n      if (selected) className += ' selected';\r\n\r\n      charElements.push(\r\n        <span key={i} className={className} onClick={() => toggleSelected(char)}>\r\n          {displayChar}\r\n        </span>\r\n      );\r\n    });\r\n\r\n    return charElements;\r\n  };\r\n\r\n  const renderRow = (rowTypes: CharType[], index: number) => {\r\n    const rowCharacters = characters\r\n      .filter(char => setEquals(char.types, rowTypes));\r\n\r\n    const cells: JSX.Element[] = [];\r\n    for (let i = 0; i < columnCount; i++) {\r\n      const cellCharacters = rowCharacters\r\n        .filter(char => char.column === i + 1);\r\n\r\n      cells.push(\r\n        <td key={i}>\r\n          <div className=\"selector-cell-content\">\r\n            {renderCellContent(cellCharacters)}\r\n          </div>\r\n        </td>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <tr key={index}>\r\n        {cells}\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  const columns: JSX.Element[] = [];\r\n  for (let i = 0; i < columnCount; i++)\r\n    columns.push(<col key={i}></col>);\r\n\r\n  return (\r\n    <table className=\"selector-table\">\r\n      <colgroup span={columnCount}>\r\n        {columns}\r\n      </colgroup>\r\n      <tbody>\r\n        {selectorRows.map((row, i) => renderRow(row, i))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Selector;","import React, { useState } from 'react';\nimport './App.css';\nimport Preview from './components/Preview';\nimport Rules from './components/Rules';\nimport Selector from './components/Selector';\nimport { Character } from './static/characters';\n\nconst App = () => {\n  const [selection, setSelection] = useState<Character[]>([]);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>\n          <em>p05</em><br />\n          Selección de<br />\n          signos propios\n        </h1>\n      </header>\n\n      <main>\n        <Rules selection={selection} />\n        <Preview selection={selection} />\n        <Selector selection={selection} onSelectionChange={setSelection} />\n      </main>\n\n      <footer>\n        <hr />\n        <div>Diseño y desarrollo por Teo Fumagalli, para cátedra Cosgaya, FADU, UBA.</div>\n        <div>\n          Desarrollado con&nbsp;\n          <a href=\"https://reactjs.org\" rel=\"external noreferrer noopener\">React</a>.&nbsp;\n          Tipografías:&nbsp;\n          <a href=\"https://www.omnibus-type.com/fonts/chivo/\" rel=\"external noreferrer noopener\">Chivo</a>,&nbsp;\n          <a href=\"https://github.com/adobe-fonts/source-sans\" rel=\"external noreferrer noopener\">Source&nbsp;Sans&nbsp;3</a>.\n        </div>\n      </footer>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}